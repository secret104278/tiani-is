// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_PRISMA_URL")
    directUrl = env("DATABASE_URL_NON_POOLING")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role Role @default(USER)

    organizedVolunteerActivites VolunteerActivity[] @relation("OrganizedVolunteerActivites")

    participatedVolunteerActivites VolunteerActivity[] @relation("ParticipatedVolunteerActivites")

    activityReviewer ActivityReviewer?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model VolunteerActivity {
    id            Int                     @id @default(autoincrement())
    title         String
    description   String?
    headcount     Int
    location      String
    startDateTime DateTime
    endDateTime   DateTime
    status        VolunteerActivityStatus @default(INREVIEW)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organiser   User   @relation("OrganizedVolunteerActivites", fields: [organiserId], references: [id])
    organiserId String

    participants User[] @relation("ParticipatedVolunteerActivites")

    version Int @default(1)
}

enum VolunteerActivityStatus {
    DRAFT
    INREVIEW
    PUBLISHED
}

model ActivityReviewer {
    id Int @id @default(autoincrement())

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

// model ActivityAdvertisingTarget {
//     lineId String @id @unique
// }
