// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Example {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  TIANI_ADMIN
  VOLUNTEER_ADMIN
  YIDECLASS_ADMIN
  ETOGETHER_ADMIN
  YIDEWORK_ADMIN
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lineNotify    LineNotify?

  roles Role[] @default([])

  organizedVolunteerActivites VolunteerActivity[] @relation("OrganizedVolunteerActivites")
  organizedClassActivites     ClassActivity[]     @relation("OrganizedClassActivites")
  organizedEtogetherActivites EtogetherActivity[] @relation("OrganizedEtogetherActivites")
  organizedYideWorkActivities YideWorkActivity[]  @relation("OrganizedYideWorkActivities")

  participatedVolunteerActivites VolunteerActivity[] @relation("ParticipatedVolunteerActivites")

  activityReviewer ActivityReviewer?

  volunteerActivityCheckRecords VolunteerActivityCheckRecord[]
  casualCheckRecords            CasualCheckRecord[]
  classActivityCheckRecord      ClassActivityCheckRecord[]
  classActivityLeaveRecord      ClassActivityLeaveRecord[]
  classMemberEnrollments        ClassMemberEnrollment[]

  etogetherActivityRegisters EtogetherActivityRegister[]
  yideWorkActivityRegisters  YideWorkActivityRegister[]
}

model LineNotify {
  id          Int    @id @default(autoincrement())
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken String

  @@unique([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VolunteerActivity {
  id            Int                     @id @default(autoincrement())
  title         String
  description   String?
  headcount     Int
  location      String
  startDateTime DateTime
  endDateTime   DateTime
  status        VolunteerActivityStatus @default(INREVIEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  organiser   User   @relation("OrganizedVolunteerActivites", fields: [organiserId], references: [id])
  organiserId String

  participants User[] @relation("ParticipatedVolunteerActivites")

  version Int @default(1)

  volunteerActivityCheckIns VolunteerActivityCheckRecord[]

  @@index([organiserId])
  @@index([startDateTime])
}

enum VolunteerActivityStatus {
  DRAFT
  INREVIEW
  PUBLISHED
}

model ActivityReviewer {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model VolunteerActivityCheckRecord {
  id         Int               @id @default(autoincrement())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  activity   VolunteerActivity @relation(fields: [activityId], references: [id])
  activityId Int

  checkInAt  DateTime  @default(now())
  checkOutAt DateTime?

  checkInLatitude   Float?
  checkInLongitude  Float?
  checkOutLatitude  Float?
  checkOutLongitude Float?

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model CasualCheckRecord {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  checkInAt  DateTime  @default(now())
  checkOutAt DateTime?

  checkInLatitude   Float?
  checkInLongitude  Float?
  checkOutLatitude  Float?
  checkOutLongitude Float?

  @@index([userId, checkInAt])
}

enum ClassActivityStatus {
  DRAFT
  PUBLISHED
}

model ClassActivity {
  id            Int                 @id @default(autoincrement())
  title         String
  description   String?
  location      String
  startDateTime DateTime
  endDateTime   DateTime
  status        ClassActivityStatus @default(PUBLISHED)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  organiser   User   @relation("OrganizedClassActivites", fields: [organiserId], references: [id])
  organiserId String

  version Int @default(1)

  classActivityCheckRecords ClassActivityCheckRecord[]
  classActivityLeaveRecords ClassActivityLeaveRecord[]

  @@index([title])
  @@index([organiserId])
  @@index([startDateTime])
}

model ClassActivityCheckRecord {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  activity   ClassActivity @relation(fields: [activityId], references: [id])
  activityId Int
  checkAt    DateTime      @default(now())

  latitude  Float?
  longitude Float?

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model ClassActivityLeaveRecord {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  activity   ClassActivity @relation(fields: [activityId], references: [id])
  activityId Int

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model ClassMemberEnrollment {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  classTitle String

  @@unique([userId, classTitle])
  @@index([classTitle])
}

enum EtogetherActivityStatus {
  DRAFT
  PUBLISHED
}

model EtogetherActivitySubgroup {
  id               Int     @id @default(autoincrement())
  title            String
  description      String?
  displayColorCode String?

  etogetherActivity   EtogetherActivity @relation(fields: [etogetherActivityId], references: [id])
  etogetherActivityId Int

  registers         EtogetherActivityRegister[]
  externalRegisters ExternalEtogetherActivityRegister[]
}

model EtogetherActivity {
  id            Int                         @id @default(autoincrement())
  title         String
  description   String?
  location      String
  startDateTime DateTime
  endDateTime   DateTime
  subgroups     EtogetherActivitySubgroup[]
  status        EtogetherActivityStatus     @default(PUBLISHED)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  organiser   User   @relation("OrganizedEtogetherActivites", fields: [organiserId], references: [id])
  organiserId String

  version Int @default(1)

  // classActivityCheckRecords ClassActivityCheckRecord[]
  // classActivityLeaveRecords ClassActivityLeaveRecord[]
  registers         EtogetherActivityRegister[]
  externalRegisters ExternalEtogetherActivityRegister[]

  @@index([title])
  @@index([organiserId])
  @@index([startDateTime])
}

model EtogetherActivityRegister {
  id Int @id @default(autoincrement())

  activity   EtogetherActivity @relation(fields: [activityId], references: [id])
  activityId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  subgroup   EtogetherActivitySubgroup @relation(fields: [subgroupId], references: [id])
  subgroupId Int

  externalRegisters ExternalEtogetherActivityRegister[]

  checkRecord EtogetherActivityCheckRecord?

  @@unique([userId, activityId])
}

model ExternalEtogetherActivityRegister {
  id Int @id @default(autoincrement())

  activity   EtogetherActivity @relation(fields: [activityId], references: [id])
  activityId Int

  username String

  mainRegister   EtogetherActivityRegister @relation(fields: [mainRegisterId], references: [id], onDelete: Cascade)
  mainRegisterId Int

  subgroup   EtogetherActivitySubgroup @relation(fields: [subgroupId], references: [id])
  subgroupId Int

  checkRecord ExternalEtogetherActivityCheckRecord?

  @@unique([activityId, username])
}

model EtogetherActivityCheckRecord {
  id Int @id @default(autoincrement())

  register   EtogetherActivityRegister @relation(fields: [registerId], references: [id], onDelete: Cascade)
  registerId Int                       @unique

  latitude  Float?
  longitude Float?
}

model ExternalEtogetherActivityCheckRecord {
  id Int @id @default(autoincrement())

  register   ExternalEtogetherActivityRegister @relation(fields: [registerId], references: [id], onDelete: Cascade)
  registerId Int                               @unique
}

model YideWorkLocation {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  yideWorkActivities YideWorkActivity[]
}

enum YideWorkActivityStatus {
  DRAFT
  PUBLISHED
}

model YideWorkActivity {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  presetId Int?
  preset   YideWorkPreset? @relation(fields: [presetId], references: [id])

  locationId Int
  location   YideWorkLocation       @relation(fields: [locationId], references: [id])
  status     YideWorkActivityStatus @default(PUBLISHED)

  startDateTime DateTime
  endDateTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  organiser   User   @relation("OrganizedYideWorkActivities", fields: [organiserId], references: [id])
  organiserId String

  version Int @default(1)

  registers         YideWorkActivityRegister[]
  externalRegisters ExternalYideWorkActivityRegister[]

  @@index([title])
  @@index([organiserId])
  @@index([startDateTime])
  @@index([locationId])
}

model YideWorkPreset {
  id          Int    @id @default(autoincrement())
  description String

  activities YideWorkActivity[]
}

model YideWorkActivityRegister {
  id Int @id @default(autoincrement())

  activity   YideWorkActivity @relation(fields: [activityId], references: [id])
  activityId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  externalRegisters ExternalYideWorkActivityRegister[]

  @@unique([userId, activityId])
}

model ExternalYideWorkActivityRegister {
  id Int @id @default(autoincrement())

  activity   YideWorkActivity @relation(fields: [activityId], references: [id])
  activityId Int

  username String

  mainRegister   YideWorkActivityRegister @relation(fields: [mainRegisterId], references: [id], onDelete: Cascade)
  mainRegisterId Int

  @@unique([activityId, username])
}
